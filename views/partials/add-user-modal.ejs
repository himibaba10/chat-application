<div class="modal-wrapper" id="add-user-modal">
  <div class="modal">
    <a href="#" onclick="closeModal()" class="modal-close">x</a>
    <div class="modal-title">
      <h2>Create New User</h2>
    </div>
    <div class="modal-body">
      <form
        action="/users"
        method="post"
        enctype="multipart/form-data"
        id="add-user-form"
      >
        <input type="text" placeholder="enter name" name="name" required />
        <p class="error name"></p>

        <input type="text" placeholder="enter email" name="email" required />
        <p class="error email"></p>

        <input type="text" placeholder="enter mobile" name="mobile" required />
        <p class="error mobile"></p>

        <input
          type="password"
          placeholder="enter password"
          name="password"
          required
        />
        <p class="error password"></p>

        <input type="file" name="avatar" />
        <p class="error avatar"></p>

        <p class="error common"></p>

        <input type="submit" value="Submit" />
      </form>
    </div>
  </div>
</div>

<script>
  const modal = document.querySelector("#add-user-modal");
  const addUserForm = document.querySelector("#add-user-form");
  function closeModal() {
    modal.style.display = "none";
  }
  function openModal() {
    modal.style.display = "block";
  }

  const successToast = Toastify({
    text: "User was added successfully! Reloading the list...",
    duration: 1000,
  });

  addUserForm.onsubmit = async (e) => {
    e.preventDefault();
    const formData = new FormData(addUserForm);

    try {
      const response = await fetch("/users", {
        method: "POST",
        body: formData,
      });
      const data = await response.json();

      clearErrors();

      if (data.errors && Object.keys(data.errors).length > 0) {
        // show error in UI
        showErrorsToUI(data.errors);
      } else {
        // Success!
        successToast.showToast();
        closeModal();

        // Reload the page after 1 second
        setTimeout(() => {
          location.reload();
        }, 1000);
      }
    } catch (err) {
      console.error(err);
      document.querySelector("p.error.common").innerText =
        "Something went wrong!";
    }
  };

  const clearErrors = () => {
    addUserForm.querySelectorAll("p.error").forEach((field) => {
      field.style.display = "none";
      field.innerText = "";
    });
  };

  const showErrorsToUI = (errors) => {
    for (let key in errors) {
      const errorField = addUserForm.querySelector(`p.error.${key}`);
      errorField.style.display = "block";
      errorField.innerText = errors[key].msg;
    }
  };
</script>
